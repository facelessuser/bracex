{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bracex Overview Bracex is a brace expanding library (\u00e0 la Bash) for Python. Brace expanding is used to generate arbitrary strings. $ echo {{ a,b } ,c } d ad bd cd Bracex adds this ability to Python: >>> bracex . expand ( r 'file-{1,2,3}.txt' ) ['file-1.txt', 'file-2.txt', 'file-3.txt'] and as a command: $ python3 -m bracex -0 \"base/{a,b}/{1..2}\" | xargs -0 mkdir -p $ tree base/ base/ \u251c\u2500\u2500 a \u2502 \u251c\u2500\u2500 1 \u2502 \u2514\u2500\u2500 2 \u2514\u2500\u2500 b \u251c\u2500\u2500 1 \u2514\u2500\u2500 2 Why Bracex over other solutions? Bracex actually follows pretty closely to how Bash processes braces. It is not a 1:1 implementation of how Bash handles braces, but generally, it follows very closely. Almost all of the test cases are run through Bash first, then our implementation is compared against the results Bash gives. There are a few cases where we have purposely deviated. For instance, we are not handling Bash's command line inputs, so we are not giving special meaning to back ticks and quotes at this time. On the command line Bracex can handle more expansions than Bash itself. More Examples: >>> bracex . expand ( r '-v{,,}' ) ['-v', '-v', '-v'] Nested braces: >>> bracex . expand ( r 'file-{{a,b},c}d.txt' ) ['file-ad.txt', 'file-bd.txt', 'file-cd.txt'] Numerical sequences: >>> bracex . expand ( r 'file{0..3}.txt' ) ['file0.txt', 'file1.txt', 'file2.txt', 'file3.txt'] >>> bracex . expand ( r 'file{0..6..2}.txt' ) ['file0.txt', 'file2.txt', 'file4.txt', 'file6.txt'] >>> bracex . expand ( r 'file{00..10..5}.jpg' ) ['file00.jpg', 'file05.jpg', 'file10.jpg'] Alphabetic sequences: >>> bracex . expand ( r 'file{A..D}.txt' ) ['fileA.txt', 'fileB.txt', 'fileC.txt', 'fileD.txt'] >>> bracex . expand ( r 'file{A..G..2}.txt' ) ['fileA.txt', 'fileC.txt', 'fileE.txt', 'fileG.txt'] Allows escaping: >>> bracex . expand ( r 'file\\{00..10..5}.jpg' ) ['file{00..10..5}.jpg'] >>> bracex . expand ( r 'file\\{00..10..5}.jpg' , keep_escapes = True ) ['file\\\\{00..10..5}.jpg'] Bracex will not expand braces in the form of ${...} : >>> bracex . expand ( r 'file${a,b,c}.jpg' ) ['file${a,b,c}.jpg'] Install $ pip install bracex API expand() def expand ( string , keep_escapes = False , limit = 1000 ): expand accepts a string and returns a list of expanded strings. It will always return at least a single empty string [\"\"] . By default, escapes will be resolved and the backslashes reduced accordingly, but keep_escapes will process the escapes without stripping them out. By default, brace expansion growth is limited to 1000 . This limit can be configured via the limit option. If you would like to remove the limit option, you simply set limit to 0 . iexpand() def iexpand ( string , keep_escapes = False , limit = 1000 ): iexpand is just like expand except it returns a generator. Command line interface $ python3 -m bracex --help usage: python -mbracex [-h] [--terminator STR | -0] [--version] expression Expands a bash-style brace expression, and outputs each expansion. positional arguments: expression Brace expression to expand optional arguments: -h, --help show this help message and exit --terminator STR, -t STR Terminate each expansion with string STR (default: \\n) -0 Terminate each expansion with a NUL character --version show program's version number and exit","title":"Usage"},{"location":"#bracex","text":"","title":"Bracex"},{"location":"#overview","text":"Bracex is a brace expanding library (\u00e0 la Bash) for Python. Brace expanding is used to generate arbitrary strings. $ echo {{ a,b } ,c } d ad bd cd Bracex adds this ability to Python: >>> bracex . expand ( r 'file-{1,2,3}.txt' ) ['file-1.txt', 'file-2.txt', 'file-3.txt'] and as a command: $ python3 -m bracex -0 \"base/{a,b}/{1..2}\" | xargs -0 mkdir -p $ tree base/ base/ \u251c\u2500\u2500 a \u2502 \u251c\u2500\u2500 1 \u2502 \u2514\u2500\u2500 2 \u2514\u2500\u2500 b \u251c\u2500\u2500 1 \u2514\u2500\u2500 2 Why Bracex over other solutions? Bracex actually follows pretty closely to how Bash processes braces. It is not a 1:1 implementation of how Bash handles braces, but generally, it follows very closely. Almost all of the test cases are run through Bash first, then our implementation is compared against the results Bash gives. There are a few cases where we have purposely deviated. For instance, we are not handling Bash's command line inputs, so we are not giving special meaning to back ticks and quotes at this time. On the command line Bracex can handle more expansions than Bash itself. More Examples: >>> bracex . expand ( r '-v{,,}' ) ['-v', '-v', '-v'] Nested braces: >>> bracex . expand ( r 'file-{{a,b},c}d.txt' ) ['file-ad.txt', 'file-bd.txt', 'file-cd.txt'] Numerical sequences: >>> bracex . expand ( r 'file{0..3}.txt' ) ['file0.txt', 'file1.txt', 'file2.txt', 'file3.txt'] >>> bracex . expand ( r 'file{0..6..2}.txt' ) ['file0.txt', 'file2.txt', 'file4.txt', 'file6.txt'] >>> bracex . expand ( r 'file{00..10..5}.jpg' ) ['file00.jpg', 'file05.jpg', 'file10.jpg'] Alphabetic sequences: >>> bracex . expand ( r 'file{A..D}.txt' ) ['fileA.txt', 'fileB.txt', 'fileC.txt', 'fileD.txt'] >>> bracex . expand ( r 'file{A..G..2}.txt' ) ['fileA.txt', 'fileC.txt', 'fileE.txt', 'fileG.txt'] Allows escaping: >>> bracex . expand ( r 'file\\{00..10..5}.jpg' ) ['file{00..10..5}.jpg'] >>> bracex . expand ( r 'file\\{00..10..5}.jpg' , keep_escapes = True ) ['file\\\\{00..10..5}.jpg'] Bracex will not expand braces in the form of ${...} : >>> bracex . expand ( r 'file${a,b,c}.jpg' ) ['file${a,b,c}.jpg']","title":"Overview"},{"location":"#install","text":"$ pip install bracex","title":"Install"},{"location":"#api","text":"","title":"API"},{"location":"#expand","text":"def expand ( string , keep_escapes = False , limit = 1000 ): expand accepts a string and returns a list of expanded strings. It will always return at least a single empty string [\"\"] . By default, escapes will be resolved and the backslashes reduced accordingly, but keep_escapes will process the escapes without stripping them out. By default, brace expansion growth is limited to 1000 . This limit can be configured via the limit option. If you would like to remove the limit option, you simply set limit to 0 .","title":"expand()"},{"location":"#iexpand","text":"def iexpand ( string , keep_escapes = False , limit = 1000 ): iexpand is just like expand except it returns a generator.","title":"iexpand()"},{"location":"#command-line-interface","text":"$ python3 -m bracex --help usage: python -mbracex [-h] [--terminator STR | -0] [--version] expression Expands a bash-style brace expression, and outputs each expansion. positional arguments: expression Brace expression to expand optional arguments: -h, --help show this help message and exit --terminator STR, -t STR Terminate each expansion with string STR (default: \\n) -0 Terminate each expansion with a NUL character --version show program's version number and exit","title":"Command line interface"},{"location":"about/changelog/","text":"Changes 2.3.post1 CHORE : Fix issue where tar ball did not include all required files for running tests. 2.3 NEW : Drop Python 3.6 support. NEW : Switch to Hatch build backend instead of Setuptools. 2.2.1 FIX : Remove excessive generator wrappers. FIX : Use AnyStr for string static types instead of custom alias. 2.2 NEW : Support Python 3.10 NEW : Command line interface using python3 -m bracex NEW : Add static types to API. 2.1.1 FIX : Expansion limit evaluated much too late and hanging can still occur with large expansions. Calculate expansion count and assert limit while parsing strings to reduce chance of hanging. 2.1 NEW : Drop support for Python 3.5. FIX : Fix potential corner case in looping logic. 2.0.1 FIX : Officially support Python 3.9. 2.0 NEW : An expansion limit of 1000 is enforced by default. This can be controlled, or even removed, via the limit option. 1.4 NEW : Remove version and version_info and the associated deprecation code. 1.3 NEW : Drop Python 3.4 support. 1.2 NEW : Officially support Python 3.8. 1.1.1 FIX : Vendor pep562 in order to reduce dependencies. 1.1 NEW : Deprecate version and version_info in favor of the more standard __version__ and __version_info__ . FIX : Proper iteration when using iexpand . 1.0.2 FIX : Officially support Python 3.7. 1.0.1 FIX : Allow zero increments in sequence ranges: {1..10..0} . Zero will be treated as one just like Bash does. 1.0 NEW : Initial release.","title":"Changelog"},{"location":"about/changelog/#changes","text":"","title":"Changes"},{"location":"about/changelog/#23post1","text":"CHORE : Fix issue where tar ball did not include all required files for running tests.","title":"2.3.post1"},{"location":"about/changelog/#23","text":"NEW : Drop Python 3.6 support. NEW : Switch to Hatch build backend instead of Setuptools.","title":"2.3"},{"location":"about/changelog/#221","text":"FIX : Remove excessive generator wrappers. FIX : Use AnyStr for string static types instead of custom alias.","title":"2.2.1"},{"location":"about/changelog/#22","text":"NEW : Support Python 3.10 NEW : Command line interface using python3 -m bracex NEW : Add static types to API.","title":"2.2"},{"location":"about/changelog/#211","text":"FIX : Expansion limit evaluated much too late and hanging can still occur with large expansions. Calculate expansion count and assert limit while parsing strings to reduce chance of hanging.","title":"2.1.1"},{"location":"about/changelog/#21","text":"NEW : Drop support for Python 3.5. FIX : Fix potential corner case in looping logic.","title":"2.1"},{"location":"about/changelog/#201","text":"FIX : Officially support Python 3.9.","title":"2.0.1"},{"location":"about/changelog/#20","text":"NEW : An expansion limit of 1000 is enforced by default. This can be controlled, or even removed, via the limit option.","title":"2.0"},{"location":"about/changelog/#14","text":"NEW : Remove version and version_info and the associated deprecation code.","title":"1.4"},{"location":"about/changelog/#13","text":"NEW : Drop Python 3.4 support.","title":"1.3"},{"location":"about/changelog/#12","text":"NEW : Officially support Python 3.8.","title":"1.2"},{"location":"about/changelog/#111","text":"FIX : Vendor pep562 in order to reduce dependencies.","title":"1.1.1"},{"location":"about/changelog/#11","text":"NEW : Deprecate version and version_info in favor of the more standard __version__ and __version_info__ . FIX : Proper iteration when using iexpand .","title":"1.1"},{"location":"about/changelog/#102","text":"FIX : Officially support Python 3.7.","title":"1.0.2"},{"location":"about/changelog/#101","text":"FIX : Allow zero increments in sequence ranges: {1..10..0} . Zero will be treated as one just like Bash does.","title":"1.0.1"},{"location":"about/changelog/#10","text":"NEW : Initial release.","title":"1.0"},{"location":"about/contributing/","text":"Contributing & Support Become a Sponsor Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal Bug Reports Please read the documentation and search the issue tracker to try and find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much information as possible: Version being used. Operating system. Version of Python. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Answer Questions in Issues Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for. Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others. Pull Requests Pull requests are welcome, and a great way to help fix bugs and add new features. If you you are interested in directly contributing to the code, please check out Development for more information on the environment and processes. Documentation Improvements A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the tool by helping to improve the documentation. Check out Development for more info on documentation.","title":"Contributing &amp; Support"},{"location":"about/contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"about/contributing/#become-a-sponsor","text":"Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal","title":"Become a Sponsor "},{"location":"about/contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try and find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much information as possible: Version being used. Operating system. Version of Python. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"about/contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"about/contributing/#answer-questions-in-issues","text":"Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for. Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others.","title":"Answer Questions in Issues"},{"location":"about/contributing/#pull-requests","text":"Pull requests are welcome, and a great way to help fix bugs and add new features. If you you are interested in directly contributing to the code, please check out Development for more information on the environment and processes.","title":"Pull Requests"},{"location":"about/contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the tool by helping to improve the documentation. Check out Development for more info on documentation.","title":"Documentation Improvements"},{"location":"about/development/","text":"Development Project Layout There are a number of files for build, test, and continuous integration in the root of the project, but in general, the project is broken up like so. \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 src \u2502 \u251c\u2500\u2500 dictionary \u2502 \u2514\u2500\u2500 markdown \u251c\u2500\u2500 bracex \u251c\u2500\u2500 requirements \u2514\u2500\u2500 tests Directory Description docs/src/dictionary Contains the spell check wordlist(s) for the project. docs/src/markdown Contains the content for the documentation. soupsieve Contains the source code for the project. requirements Contains files with lists of dependencies that are required for the project, and required for continuous integration. tests Contains unit test files. Coding Standards When writing code, the code should roughly conform to PEP8 and PEP257 suggestions. The project utilizes the Flake8 linter (with some additional plugins) to ensure code conforms (give or take some of the rules). When in doubt, follow the formatting hints of existing code when adding files or modifying existing files. Listed below are the modules used: pycqa/flake8 pycqa/flake8-docstrings pycqa/pep8-naming ebeweber/flake8-mutable gforcada/flake8-builtins Usually this can be automated with Tox (assuming it is installed): tox -e lint . Building and Editing Documents Documents are in Markdown (with with some additional syntax provided by extensions) and are converted to HTML via Python Markdown. If you would like to build and preview the documentation, you must have these packages installed: Python-Markdown/markdown : the Markdown parser. mkdocs/mkdocs : the document site generator. squidfunk/mkdocs-material : a material theme for MkDocs. facelessuser/pymdown-extensions : this Python Markdown extension bundle. In order to build and preview the documents, just run the command below from the root of the project and you should be able to view the documents at localhost:8000 in your browser. After that, you should be able to update the documents and have your browser preview update live. mkdocs serve Spell Checking Documents Spell checking is performed via facelessuser/pyspelling . During validation we build the docs and spell check various files in the project. Aspell must be installed and in the path. Currently this project uses one of the more recent versions of Aspell. It is not expected that everyone will install and run Aspell locally, but it will be run in CI tests for pull requests. In order to perform the spell check locally, it is expected you are setup to build the documents, and that you have Aspell installed in your system path (if needed you can use the --binary option to point to the location of your Aspell binary). It is also expected that you have the en dictionary installed as well. To initiate the spell check, run the following command from the root of the project. You will need to make sure the documents are built first: mkdocs build --clean And then run the spell checker. pyspelling It should print out the files with the misspelled words if any are found. If you find it prints words that are not misspelled, you can add them in docs/src/dictionary/en-custom.text . Validation Tests In order to preserve good code health, a test suite has been put together with pytest ( pytest-dev/pytest ). To run these tests, you can use the following command: py.test Running Validation With Tox Tox ( tox-dev/tox ) is a great way to run the validation tests, spelling checks, and linting in virtual environments so as not to mess with your current working environment. Tox will use the specified Python version for the given environment and create a virtual environment and install all the needed requirements (minus Aspell). You could also setup your own virtual environments with the Virtualenv module without Tox, and manually do the same. First, you need to have Tox installed: pip install tox By running Tox, it will walk through all the environments and create them (assuming you have all the python versions on your machine) and run the related tests. See tox.ini to learn more. tox If you don't have all the Python versions needed to test all the environments, those entries will fail. To run the tests for specific versions of Python, you specify the environment with -e PXY where X is the major version and Y is the minor version. tox -e py37 To target linting: tox -e lint To select spell checking and document building: tox -e documents Code Coverage When running the validation tests through Tox, it is setup to track code coverage via the Coverage ( ned/coveragepy ) module. Coverage is run on each pyxx environment. If you've made changes to the code, you can clear the old coverage data: coverage erase Then run each unit test environment to generate coverage data. All the data from each run is merged together. HTML is output for each file in .tox/pyXX/tmp . You can use these to see areas that are not covered/exercised yet with testing. You can checkout tox.ini to see how this is accomplished.","title":"Development"},{"location":"about/development/#development","text":"","title":"Development"},{"location":"about/development/#project-layout","text":"There are a number of files for build, test, and continuous integration in the root of the project, but in general, the project is broken up like so. \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 src \u2502 \u251c\u2500\u2500 dictionary \u2502 \u2514\u2500\u2500 markdown \u251c\u2500\u2500 bracex \u251c\u2500\u2500 requirements \u2514\u2500\u2500 tests Directory Description docs/src/dictionary Contains the spell check wordlist(s) for the project. docs/src/markdown Contains the content for the documentation. soupsieve Contains the source code for the project. requirements Contains files with lists of dependencies that are required for the project, and required for continuous integration. tests Contains unit test files.","title":"Project Layout"},{"location":"about/development/#coding-standards","text":"When writing code, the code should roughly conform to PEP8 and PEP257 suggestions. The project utilizes the Flake8 linter (with some additional plugins) to ensure code conforms (give or take some of the rules). When in doubt, follow the formatting hints of existing code when adding files or modifying existing files. Listed below are the modules used: pycqa/flake8 pycqa/flake8-docstrings pycqa/pep8-naming ebeweber/flake8-mutable gforcada/flake8-builtins Usually this can be automated with Tox (assuming it is installed): tox -e lint .","title":"Coding Standards"},{"location":"about/development/#building-and-editing-documents","text":"Documents are in Markdown (with with some additional syntax provided by extensions) and are converted to HTML via Python Markdown. If you would like to build and preview the documentation, you must have these packages installed: Python-Markdown/markdown : the Markdown parser. mkdocs/mkdocs : the document site generator. squidfunk/mkdocs-material : a material theme for MkDocs. facelessuser/pymdown-extensions : this Python Markdown extension bundle. In order to build and preview the documents, just run the command below from the root of the project and you should be able to view the documents at localhost:8000 in your browser. After that, you should be able to update the documents and have your browser preview update live. mkdocs serve","title":"Building and Editing Documents"},{"location":"about/development/#spell-checking-documents","text":"Spell checking is performed via facelessuser/pyspelling . During validation we build the docs and spell check various files in the project. Aspell must be installed and in the path. Currently this project uses one of the more recent versions of Aspell. It is not expected that everyone will install and run Aspell locally, but it will be run in CI tests for pull requests. In order to perform the spell check locally, it is expected you are setup to build the documents, and that you have Aspell installed in your system path (if needed you can use the --binary option to point to the location of your Aspell binary). It is also expected that you have the en dictionary installed as well. To initiate the spell check, run the following command from the root of the project. You will need to make sure the documents are built first: mkdocs build --clean And then run the spell checker. pyspelling It should print out the files with the misspelled words if any are found. If you find it prints words that are not misspelled, you can add them in docs/src/dictionary/en-custom.text .","title":"Spell Checking Documents"},{"location":"about/development/#validation-tests","text":"In order to preserve good code health, a test suite has been put together with pytest ( pytest-dev/pytest ). To run these tests, you can use the following command: py.test","title":"Validation Tests"},{"location":"about/development/#running-validation-with-tox","text":"Tox ( tox-dev/tox ) is a great way to run the validation tests, spelling checks, and linting in virtual environments so as not to mess with your current working environment. Tox will use the specified Python version for the given environment and create a virtual environment and install all the needed requirements (minus Aspell). You could also setup your own virtual environments with the Virtualenv module without Tox, and manually do the same. First, you need to have Tox installed: pip install tox By running Tox, it will walk through all the environments and create them (assuming you have all the python versions on your machine) and run the related tests. See tox.ini to learn more. tox If you don't have all the Python versions needed to test all the environments, those entries will fail. To run the tests for specific versions of Python, you specify the environment with -e PXY where X is the major version and Y is the minor version. tox -e py37 To target linting: tox -e lint To select spell checking and document building: tox -e documents","title":"Running Validation With Tox"},{"location":"about/development/#code-coverage","text":"When running the validation tests through Tox, it is setup to track code coverage via the Coverage ( ned/coveragepy ) module. Coverage is run on each pyxx environment. If you've made changes to the code, you can clear the old coverage data: coverage erase Then run each unit test environment to generate coverage data. All the data from each run is merged together. HTML is output for each file in .tox/pyXX/tmp . You can use these to see areas that are not covered/exercised yet with testing. You can checkout tox.ini to see how this is accomplished.","title":"Code Coverage"},{"location":"about/license/","text":"License MIT License Copyright \u00a9 2018 - 2022 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"MIT License Copyright \u00a9 2018 - 2022 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}